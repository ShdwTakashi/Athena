const prompt = require("prompt-sync")({ sigint: true });
const { checkAuth, checkConnect } = require("../api");
const { readFile, writeFile } = require("../utilities/file");
const { authenticate, updateNetRC } = require("../utilities/auth");
const { getServiceToken } = require("../api");
const { LOGIN_HOST, KEYS_HOST } = require("../variables");

/**
 * Parse and redeem service token (passed in as an environment variable)
 * for related.
 * @param {Object} obj
 * @param {String} obj.serviceToken - service token in "[token],[privateKey]" format
*/
const processServiceToken = async ({
	serviceToken
}) => {
	try {
		const [token, privateKey] = serviceToken.split(',');
		const res = await getServiceToken({ token });
		
		await writeFile({
			fileName: ".env.infisical",
			content: res.serviceToken.workspace + "," + res.serviceToken.environment
		});

		// update authentication information on file
		updateNetRC({
			host: LOGIN_HOST,
			login: 'service_token',
			password: token
		});

		// update key information on file
		updateNetRC({
			host: KEYS_HOST,
			login: res.serviceToken.publicKey,
			password: privateKey
		});

		// get service token
	} catch (err) {
		throw new Error('Failed to process service token');
	}
}

/**
 * Setup prompt to ensure user is prepared
 */
const setup = async () => {
	if (process.env?.INFISICAL_TOKEN) {
		// case: detected infisical token
		
		await processServiceToken({
			serviceToken: process.env.INFISICAL_TOKEN
		});
		
		return;
	}
	
	let isAuthenticated;
	try {
		isAuthenticated = await checkAuth();
	} catch (err) {}

	let isConnected;
	try {
		isConnected = await checkConnect({
			workspaceId: readFile(".env.infisical").split(',')[0],
		});
	} catch (err) {
	}

	while (!isAuthenticated || !isConnected) {
		try {
			// ensure user is authenticated
			if (!isAuthenticated) {
				console.log("üëâ Let's get you logged in.");
				const email = prompt("Email: ");
				const password = prompt("Password: ", { echo: "" });
				await authenticate({
					email,
					password,
				});
				isAuthenticated = true;
				console.log("\n");
			}

			// ensure user is connected to workspace
			if (!isConnected) {
				console.log("üëâ Let's get connected to a project.");
				const workspaceId = prompt("Project ID: ");
				isConnected = await checkConnect({
					workspaceId,
				});

				if (!isConnected)
					throw new Error(
						"‚ùå Failed to conect to project with id " + workspaceId
					);
				await writeFile({
					fileName: ".env.infisical",
					content: workspaceId,
				});
				console.log("\n");
			}
		} catch (err) {
			console.log(err.message);
		}
	}
};

module.exports = {
	setup,
};
